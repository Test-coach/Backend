version: '3.8'

services:
  app:
    build:
      context: ../..
      dockerfile: docker/dev/Dockerfile
    container_name: backend-app-dev
    environment:
      - NODE_ENV=development
      - PORT=3000
      - API_PREFIX=/api/v1
      - DATABASE_URL=postgresql://dev:password@postgres:5432/myappdb?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - JWT_SECRET=your_jwt_super_secret_key_here
      - JWT_EXPIRES_IN=24h
      - SALT_ROUNDS=12
      - MONGO_URI=mongodb://localhost:27017
      - MONGO_DB=typing_analytics
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=debug
      - LOG_FORMAT=dev
      - NODE_OPTIONS=--inspect=0.0.0.0:9229
    ports:
      - "3000:3000"
      - "9229:9229"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../..:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run dev

  postgres:
    image: postgres:15-alpine
    container_name: backend-postgres-dev
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=myappdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d myappdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: backend-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data: 